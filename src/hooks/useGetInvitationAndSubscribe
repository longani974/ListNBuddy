import { useQuery,   } from "@tanstack/react-query";
import pb from "../lib/pocketbase";
import { useEffect } from "react";
import { useRecoilValue } from "recoil";
import { userState } from "../atoms/userAtoms";

export default function useGetInvitationsAndRealTime() {
//   const [invitationId, setInvitationId] = useState<string>("");
//   const queryClient = useQueryClient();

  const { isLogin, userId } = useRecoilValue(userState);

  useEffect(() => {
    const realTime = async () => {
      await pb.collection("invitations").subscribe(userId as string, function (change) {
        getInvitation(change)
      });
    };

    isLogin && realTime();

    return () => {
      pb.collection("invitations").unsubscribe(userId);
    };
  }, [isLogin, userId]);

  const getInvitation = async (change) => {
    // const invitationItems = await pb.collection("invitations").getList(1, 1);
    // const latestInvitation = invitationItems.items[0];
    // if (latestInvitation) {
    //   setInvitationId(latestInvitation.id);
    //   return latestInvitation;
    // } else {
    //   return null;
    // }
    return change
  };

  const queryResult = useQuery(["invitationId"], getInvitation);

  // Handle the undefined case by giving some "initial data"
  return { invitations: queryResult.data ?? [], ...queryResult };
}
